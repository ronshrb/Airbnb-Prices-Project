from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.metrics import roc_auc_score


%run "/housing prices project/classes and functions"

train_df = spark.read.format("delta").table("train_df")
test_df = spark.read.format("delta").table("test_df")
test_lab_df = spark.read.format("delta").table("test_lab_df")

processer_test = preprocessing(test_df)
processed_test = processer_test.fit()

processer_train = preprocessing(train_df)
processed_train = processer_train.fit()

X_train = processed_train.drop("expensive").toPandas().values.tolist()
y_train = processed_train.select("expensive").toPandas().values.tolist()


# balancing the data
os = SMOTE(random_state=0)
over = SMOTE(sampling_strategy=0.7)
X, y = over.fit_resample(X_train, y_train)

X_test = processed_test.toPandas().values.tolist()
y_test = test_lab_df.select("expensive").toPandas().values.tolist()


# scaling the data
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X)
X_test_scaled = scaler.fit_transform(X_test)

PCAer = PCA(37)
final_X_train = PCAer.fit(X_train_scaled)
final_X_train = PCAer.transform(X_train_scaled)
final_X_test = PCAer.transform(X_test_scaled)

logreg = LogisticRegression(max_iter=1000)
logreg.fit(final_X_train.tolist(), y)
y_pred = logreg.predict(final_X_test.tolist())
